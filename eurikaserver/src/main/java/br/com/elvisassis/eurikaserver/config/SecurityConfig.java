package br.com.elvisassis.eurikaserver.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.Customizer;@Configurationpublic class SecurityConfig {    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        http                .csrf(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(auth -> auth                        .requestMatchers(                                "/", "/favicon.ico",                                "/css/**", "/js/**", "/images/**", "/webjars/**", "/fonts/**",                                "/eureka/css/**", "/eureka/js/**", "/eureka/images/**", "/eureka/webjars/**", "/eureka/fonts/**"                        ).permitAll()                        .requestMatchers("/eureka/apps/**", "/eureka/v2/apps/**").authenticated()                        .anyRequest().permitAll() // Opcional: libera o resto do eureka                )                .httpBasic(Customizer.withDefaults())                .formLogin(AbstractHttpConfigurer::disable)                .exceptionHandling(ex -> ex                        .authenticationEntryPoint((request, response, authException) ->                                response.sendError(response.SC_UNAUTHORIZED, "Unauthorized")                        )                );        return http.build();    }}