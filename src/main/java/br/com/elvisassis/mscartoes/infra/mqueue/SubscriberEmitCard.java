package br.com.elvisassis.mscartoes.infra.mqueue;import br.com.elvisassis.mscartoes.domain.Card;import br.com.elvisassis.mscartoes.domain.CardClient;import br.com.elvisassis.mscartoes.domain.CardIssuanceRequestData;import br.com.elvisassis.mscartoes.infra.repository.CardClientRepository;import br.com.elvisassis.mscartoes.infra.repository.CardRepository;import com.fasterxml.jackson.databind.ObjectMapper;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.amqp.rabbit.annotation.RabbitListener;import org.springframework.messaging.handler.annotation.Payload;import org.springframework.stereotype.Component;@Slf4j@Component@RequiredArgsConstructorpublic class SubscriberEmitCard {    private final CardRepository repository;    private final CardClientRepository cardClientRepository;    @RabbitListener(queues = "${mq.queues.emissao-cartoes}")    public void receiveIssuanceRequest(@Payload String payload) {        try {            var mapper = new ObjectMapper();            CardIssuanceRequestData data = mapper.readValue(payload, CardIssuanceRequestData.class);            Card card = repository.findById(data.getIdCard()).orElseThrow();            CardClient cardClient = new CardClient();            cardClient.setCard(card);            cardClient.setCpf(data.getCpf());            cardClient.setLimit(data.getLimitAvailable());            cardClientRepository.save(cardClient);        } catch (Exception e) {            log.error("Erro ao receber solicitação de emissão de cartão {} ", e.getMessage());        }    }}