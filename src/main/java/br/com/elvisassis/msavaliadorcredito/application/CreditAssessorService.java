package br.com.elvisassis.msavaliadorcredito.application;import br.com.elvisassis.msavaliadorcredito.application.ex.CardIssuanceErrorException;import br.com.elvisassis.msavaliadorcredito.application.ex.ClientDataNotFoundException;import br.com.elvisassis.msavaliadorcredito.application.ex.ErrorComunicationMicroServicesException;import br.com.elvisassis.msavaliadorcredito.domain.model.*;import br.com.elvisassis.msavaliadorcredito.infra.clients.CardResourceClient;import br.com.elvisassis.msavaliadorcredito.infra.clients.ClientResourceClient;import br.com.elvisassis.msavaliadorcredito.infra.mqueue.CardIssueRequestPublisher;import feign.FeignException;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import java.math.BigDecimal;import java.util.List;import java.util.UUID;import java.util.stream.Collectors;@Service@RequiredArgsConstructorpublic class CreditAssessorService {    private final ClientResourceClient client;    private final CardResourceClient cardResource;    private final CardIssueRequestPublisher publisher;    public ClientSituation getSituationClient(String cpf) throws ClientDataNotFoundException, ErrorComunicationMicroServicesException {        try {            ResponseEntity<ClientData> clientData = client.clientData(cpf);            ResponseEntity<List<ClientCard>> cardData = cardResource.getCardsByClients(cpf);            return ClientSituation                    .builder()                    .client(clientData.getBody())                    .cards(cardData.getBody())                    .build();        } catch (FeignException.FeignClientException ex) {            int status = ex.status();            if (HttpStatus.NOT_FOUND.value() == status) {                throw new ClientDataNotFoundException();            }            throw new ErrorComunicationMicroServicesException(ex.getMessage(), status);        }    }    /**     * Verifica se de com acordo com o income(renda) ele pode solicitar um mais cartões     * Regra: para colcular o limite de crédito faz o seguinte calculo:     * idade do cliente dividido por 10 multiplicado pele basebLimit(limitBasico)     */    public ReturnEvaluationClient checkEvaluation(String cpf, Long income)            throws ClientDataNotFoundException, ErrorComunicationMicroServicesException {        try {            ResponseEntity<ClientData> clientDataResponse = client.clientData(cpf);            ResponseEntity<List<Card>> cardsResponse = cardResource.getCardByIncome(income);            List<Card> cards = cardsResponse.getBody();            var approvadCardList = cards.stream().map(card -> {                ClientData clientData = clientDataResponse.getBody();                BigDecimal basicLimit = card.getBasicLimit();                BigDecimal ageBD = BigDecimal.valueOf(clientData.getAge());                var factor = ageBD.divide(BigDecimal.valueOf(10));                BigDecimal approvedLimit = factor.multiply(basicLimit);                ApprovedCard approvedCard = new ApprovedCard();                approvedCard.setCard(card.getName());                approvedCard.setFlag(card.getFlag());                approvedCard.setApprovedLimit(approvedLimit);                return approvedCard;            }).collect(Collectors.toList());            return new ReturnEvaluationClient(approvadCardList);        } catch (FeignException.FeignClientException ex) {            int status = ex.status();            if (HttpStatus.NOT_FOUND.value() == status) {                throw new ClientDataNotFoundException();            }            throw new ErrorComunicationMicroServicesException(ex.getMessage(), status);        }    }    public CardRequestProtocol cardIssuanceRequest(CardIssuanceRequestData data) {        try {            publisher.cardIssue(data);            var protocol = UUID.randomUUID().toString();            return new CardRequestProtocol(protocol);        } catch (Exception e) {            throw new CardIssuanceErrorException(e.getMessage());        }    }}