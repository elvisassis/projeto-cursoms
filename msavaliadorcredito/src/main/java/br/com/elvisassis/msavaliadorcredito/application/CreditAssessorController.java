package br.com.elvisassis.msavaliadorcredito.application;import br.com.elvisassis.msavaliadorcredito.application.ex.CardIssuanceErrorException;import br.com.elvisassis.msavaliadorcredito.application.ex.ClientDataNotFoundException;import br.com.elvisassis.msavaliadorcredito.application.ex.ErrorComunicationMicroServicesException;import br.com.elvisassis.msavaliadorcredito.domain.model.*;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping("/avaliacoes-credito")@RequiredArgsConstructorpublic class CreditAssessorController {    private final CreditAssessorService creditAssessorservice;    @GetMapping    public String status() {        return "ok";    }    @GetMapping(value = "/situacao-cliente", params = "cpf")    public ResponseEntity checkClientStatus(@RequestParam("cpf") String cpf) {        try {            ClientSituation clientSituation = creditAssessorservice.getSituationClient(cpf);        return ResponseEntity.ok(clientSituation);        } catch (ClientDataNotFoundException e) {            return ResponseEntity.notFound().build();        } catch (ErrorComunicationMicroServicesException e) {            return ResponseEntity.status(HttpStatus.resolve(e.getStatus()))                    .body(e.getMessage());        }    }    @PostMapping    public ResponseEntity PerformEvaluation(@RequestBody EvaluationData data) {        try {           ReturnEvaluationClient returnEvaluationClient = creditAssessorservice                   .checkEvaluation(data.getCpf(), data.getIncome());           return ResponseEntity.ok(returnEvaluationClient);        } catch (ClientDataNotFoundException e) {            return ResponseEntity.notFound().build();        } catch (ErrorComunicationMicroServicesException e) {            return ResponseEntity.status(HttpStatus.resolve(e.getStatus()))                    .body(e.getMessage());        }    }    @PostMapping("/solicitacoes-cartao")    public ResponseEntity issueCard(@RequestBody CardIssuanceRequestData data) {        try{            CardRequestProtocol cardRequestProtocol = creditAssessorservice                    .cardIssuanceRequest(data);            return ResponseEntity.ok(cardRequestProtocol);        }catch (CardIssuanceErrorException e) {            return ResponseEntity.internalServerError().body(e.getMessage());        }    }}